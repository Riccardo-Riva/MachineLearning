{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7a11e084-3c4c-4424-bf34-900d93796dff",
   "metadata": {},
   "source": [
    "## PCA for images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6729de28-4545-448d-91de-bf06d8051844",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0799adf-a56f-48be-b741-6564cd322336",
   "metadata": {},
   "source": [
    "### Preliminar operations on data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3dba1e4b-6830-4c7c-939f-7b921344710d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>emotion</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "      <th>data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>happy</td>\n",
       "      <td>7215</td>\n",
       "      <td>1774</td>\n",
       "      <td>8989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>surprise</td>\n",
       "      <td>3171</td>\n",
       "      <td>831</td>\n",
       "      <td>4002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>angry</td>\n",
       "      <td>3995</td>\n",
       "      <td>958</td>\n",
       "      <td>4953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fear</td>\n",
       "      <td>4097</td>\n",
       "      <td>1024</td>\n",
       "      <td>5121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>sad</td>\n",
       "      <td>4830</td>\n",
       "      <td>1247</td>\n",
       "      <td>6077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>disgust</td>\n",
       "      <td>436</td>\n",
       "      <td>111</td>\n",
       "      <td>547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>neutral</td>\n",
       "      <td>4965</td>\n",
       "      <td>1233</td>\n",
       "      <td>6198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>total</td>\n",
       "      <td>28709</td>\n",
       "      <td>7178</td>\n",
       "      <td>35887</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    emotion  train  test   data\n",
       "0     happy   7215  1774   8989\n",
       "1  surprise   3171   831   4002\n",
       "2     angry   3995   958   4953\n",
       "3      fear   4097  1024   5121\n",
       "4       sad   4830  1247   6077\n",
       "5   disgust    436   111    547\n",
       "6   neutral   4965  1233   6198\n",
       "7     total  28709  7178  35887"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numbers:\n",
      " {0: 'happy', 1: 'surprise', 2: 'angry', 3: 'fear', 4: 'sad', 5: 'disgust', 6: 'neutral'}\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from PIL import Image\n",
    "import os\n",
    "\n",
    "# count the number of images\n",
    "\n",
    "def count_data(data_dir,data_ensemble):\n",
    "    return {emotion : len(os.listdir(os.path.join(data_dir,data_ensemble,emotion)))\n",
    "         for emotion in os.listdir(os.path.join(data_dir,data_ensemble))}\n",
    "\n",
    "data_dir='../dataset'\n",
    "\n",
    "n_train=count_data(data_dir,'train')\n",
    "n_test=count_data(data_dir,'test')\n",
    "\n",
    "n_train=count_data(data_dir,'train')\n",
    "n_test=count_data(data_dir,'test')\n",
    "n_tab=pd.DataFrame(n_train,index=['train'])\n",
    "n_tab=pd.concat([n_tab,pd.DataFrame(n_test,index=['test'])])\n",
    "n_tab['total']=n_tab.sum(axis=1)\n",
    "n_tab=pd.concat([n_tab,\n",
    "                 pd.DataFrame(n_tab.sum(axis=0),index=n_tab.columns,columns=['data']).transpose()])\n",
    "n_tab=n_tab.transpose().reset_index().rename(columns={'index':'emotion'})\n",
    "display(n_tab)\n",
    "\n",
    "# dictionary to interpret the classification integer outputs\n",
    "emotions={n:emotion for n,emotion in enumerate(np.array(os.listdir(\"../dataset/train/\")))}\n",
    "print(\"numbers:\\n\",emotions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "25e54a73-86c0-47cf-8869-39d27e74bdf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28273, 2304)\n",
      "(7067, 2304)\n"
     ]
    }
   ],
   "source": [
    "# charge the image dataset as an array of 48x48 matrices\n",
    "# load_data loads the data in a dictionary of categories\n",
    "def load_data(image_dir):\n",
    "    assert type(image_dir)==str\n",
    "    X_dict={}\n",
    "    Y_dict={}\n",
    "    for i_em,emotion in enumerate(np.array(os.listdir(image_dir))):\n",
    "        X_dict[emotion]=np.zeros((len(os.listdir(os.path.join(image_dir,emotion))),48,48))\n",
    "        Y_dict[emotion]=np.zeros(len(os.listdir(os.path.join(image_dir,emotion))))\n",
    "        for i_file,image_file in enumerate(np.array(os.listdir(os.path.join(image_dir,emotion)))):\n",
    "            filename=os.path.join(image_dir,emotion,image_file)\n",
    "            image = Image.open(filename).convert('L')\n",
    "            ydim, xdim = image.size\n",
    "            pix=image.load();\n",
    "            data = np.zeros((xdim, ydim))\n",
    "            for j in range(ydim):\n",
    "                for k in range(xdim):\n",
    "                    data[k,j]=pix[j,k]\n",
    "            X_dict[emotion][i_file]=data\n",
    "            Y_dict[emotion][i_file]=i_em\n",
    "    return X_dict, Y_dict\n",
    "\n",
    "# shuffle features and targets simoultaneously\n",
    "def shuffle_data(X,Y):\n",
    "    assert len(X)==len(Y)\n",
    "    perm=np.random.permutation(len(X))\n",
    "    return X[perm],Y[perm]\n",
    "\n",
    "X_train_dict,Y_train_dict=load_data(os.path.join(data_dir,'train'))\n",
    "X_test_dict,Y_test_dict=load_data(os.path.join(data_dir,'test'))\n",
    "\n",
    "del X_train_dict['disgust']\n",
    "del X_test_dict['disgust']\n",
    "del Y_train_dict['disgust']\n",
    "del Y_test_dict['disgust']\n",
    "\n",
    "\"\"\"\n",
    "X_train_dict['happy']=X_train_dict['happy'][:5000]\n",
    "Y_train_dict['happy']=Y_train_dict['happy'][:5000]\n",
    "X_test_dict['happy']=X_test_dict['happy'][:1300]\n",
    "Y_test_dict['happy']=Y_test_dict['happy'][:1300]\n",
    "\"\"\"\n",
    "\n",
    "# dict to unique array\n",
    "X_train=np.concatenate(tuple(X_train_dict.values()))\n",
    "Y_train=np.concatenate(tuple(Y_train_dict.values()))\n",
    "X_test=np.concatenate(tuple(X_test_dict.values()))\n",
    "Y_test=np.concatenate(tuple(Y_test_dict.values()))\n",
    "\n",
    "# rearrange emtoions after removing disgust\n",
    "for i,label in enumerate(Y_train):\n",
    "    if label==6.:\n",
    "        Y_train[i]=5.\n",
    "for i,label in enumerate(Y_test):\n",
    "    if label==6.:\n",
    "        Y_test[i]=5.\n",
    "\n",
    "# data shape info\n",
    "image_size=len(X_train[0][0])\n",
    "pixel_number=image_size**2\n",
    "\n",
    "# set seed\n",
    "np.random.seed(2)\n",
    "\n",
    "# shuffle\n",
    "X_train,Y_train=shuffle_data(X_train,Y_train)\n",
    "X_test,Y_test=shuffle_data(X_test,Y_test)\n",
    "\n",
    "# reshape matrices\n",
    "n_train=len(X_train)\n",
    "n_test=len(X_test)\n",
    "X_train_lin=X_train.reshape(n_train,-1)\n",
    "X_test_lin=X_test.reshape(n_test,-1)\n",
    "\n",
    "print(X_train_lin.shape)\n",
    "print(X_test_lin.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3d41efe-a851-4ee6-bd0b-71240fd4befb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (5,3)\n",
    "#sns.set_theme(style='darkgrid')\n",
    "sns.barplot(n_tab.drop([7]),x='emotion',y='data')\n",
    "plt.title('Labels countplot')\n",
    "plt.ylabel('count')\n",
    "plt.xticks(rotation = 45) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98c12978-378d-4468-bbca-01bcb047c13a",
   "metadata": {},
   "source": [
    "### Image examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "786b662e-25f3-47c0-95fd-ea4f4446cfea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def print_images(pixels,labels,x_grid,y_grid):\n",
    "    plt.figure(figsize=(10,3*y_grid))\n",
    "    for i, image in enumerate(pixels):\n",
    "        plt.subplot(y_grid, x_grid, i+1)\n",
    "        plt.axis('off')\n",
    "        plt.imshow(image, cmap=plt.cm.gray, interpolation='nearest')\n",
    "        plt.title(\"Label: \" + emotions[labels[i]])\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "image_index=np.arange(10)\n",
    "print_images(X_train[image_index],Y_train[image_index],5,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "13c291fa-dbd8-4b3c-9bc8-f9f144a64a71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image_index=np.array([np.where(Y_train==y)[0][0] for y in np.unique(Y_train)])\n",
    "print_images(X_train[image_index],Y_train[image_index],4,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c33a9dee-12a7-45a2-9c72-d6cbadc75390",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### PCA decomposition: Dimensional reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "770d5754-df0a-4ea2-b2ac-46e186d09830",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# pixel number = 2304\n",
    "pca = PCA(pixel_number)\n",
    "pca.fit(X_train_lin)\n",
    "\n",
    "Z_train=pca.transform(X_train_lin)\n",
    "pca_new = PCA(pixel_number)\n",
    "pca_new.fit(Z_train)\n",
    "\n",
    "pca_new_cov=pca_new.get_covariance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5367870-8d10-4c64-96d1-2d8371a99858",
   "metadata": {},
   "outputs": [],
   "source": [
    "var=np.array([pca_new_cov[i,i] for i in range(2304)])\n",
    "cum_var=np.zeros(len(var))\n",
    "for i in range(len(var)):\n",
    "    cum_var[i]=(var[:i].sum())\n",
    "cum_var=cum_var/var.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01f0c1f5-6bec-4a2b-bba9-95531ee7c7a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "perc_target=np.array([.90,.95,.99,.995,.997])\n",
    "n_perc=np.zeros(len(perc_target))\n",
    "for i,perc in enumerate(perc_target):\n",
    "    n_perc[i]=np.where(cum_var>=perc)[0][0]\n",
    "\n",
    "perc_df=pd.DataFrame({'percentage':perc_target*100.,'components':n_perc})\n",
    "perc_df.components=perc_df.components.astype(int)\n",
    "display(perc_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b87aeba-1d97-447d-87df-70f9ec77d171",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize = (9, 4))\n",
    "plt.title('PCA decomposition variance')\n",
    "plt.ylim(0.,1.2)\n",
    "plt.ylabel('variance percentage')\n",
    "plt.xlabel('number of components')\n",
    "plt.hlines(y=1., xmin=0, xmax=pixel_number, colors='gray', linestyles='--')\n",
    "plt.plot(cum_var,color='black')\n",
    "\n",
    "plt.vlines(x=n_perc, ymin=0, ymax=1.05, color = 'r')\n",
    "for i, x in enumerate(n_perc):\n",
    "    plt.text(x,1.1,'%s%%' % (\"{:.1f}\".format(perc_target[i]*100.)),\n",
    "             rotation=0, verticalalignment='center',fontsize=7)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ff1d1ad-f4a8-458b-ae4a-9e269a203805",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### PCA with 900 components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9254f6b-bcd6-4579-8e00-152c2c4a00ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "examples=np.array([34,68])\n",
    "n_components=1500\n",
    "\n",
    "Z_ex=Z_train[examples].copy()\n",
    "Z_ex[:,n_components:]=0\n",
    "X_ex=pca.inverse_transform(Z_ex)\n",
    "X_ex=np.reshape(X_ex,(-1,48,48))\n",
    "print_images(X_ex,Y_train[examples],2,1)\n",
    "print_images(X_train[examples],Y_train[examples],2,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "41a6095a-e315-4dcb-adc3-dcc10a77b9be",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA(n_components)\n",
    "pca.fit(X_train_lin)\n",
    "\n",
    "Z_train=pca.transform(X_train_lin)\n",
    "Z_test=pca.transform(X_test_lin)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46bcfd25-9721-4d53-9f5f-5c8b95cbc804",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### FFNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "270efa1d-0e36-40a9-80a8-dab215a4b814",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-11 10:06:01.155748: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import Input\n",
    "from tensorflow.keras.layers import Dropout\n",
    "from tensorflow.keras.models import Sequential      #This allows appending layers to existing models\n",
    "from tensorflow.keras.layers import Dense           #This allows defining the characteristics of a particular layer\n",
    "from tensorflow.keras import optimizers             #This allows using whichever optimiser we want (sgd,adam,RMSprop)\n",
    "from tensorflow.keras import regularizers           #This allows using whichever regularizer we want (l1,l2,l1_l2)\n",
    "from tensorflow.keras.utils import to_categorical   #This allows using categorical cross entropy as the cost function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "218cce88-1942-453f-bcfa-7eaed1d52c27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28709, 1500)\n"
     ]
    }
   ],
   "source": [
    "mean=Z_train.mean()\n",
    "std= Z_train.std()\n",
    "\n",
    "Z_train=(Z_train-mean)/std\n",
    "Z_test=(Z_test-mean)/std\n",
    "\n",
    "Y_train_vec=to_categorical(Y_train)\n",
    "Y_test_vec=to_categorical(Y_test)\n",
    "\n",
    "print(Z_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a10f35f0-bf6d-4998-a8e9-047369dd6ff3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "288/288 - 3s - loss: 1.7125 - accuracy: 0.3198 - val_loss: 1.6808 - val_accuracy: 0.3360 - 3s/epoch - 10ms/step\n",
      "Epoch 2/100\n",
      "288/288 - 2s - loss: 1.5784 - accuracy: 0.3865 - val_loss: 1.6926 - val_accuracy: 0.3454 - 2s/epoch - 9ms/step\n",
      "Epoch 3/100\n",
      "288/288 - 2s - loss: 1.5133 - accuracy: 0.4175 - val_loss: 1.6899 - val_accuracy: 0.3661 - 2s/epoch - 8ms/step\n",
      "Epoch 4/100\n",
      "288/288 - 3s - loss: 1.4548 - accuracy: 0.4410 - val_loss: 1.7732 - val_accuracy: 0.3525 - 3s/epoch - 10ms/step\n",
      "Epoch 5/100\n",
      "288/288 - 2s - loss: 1.4045 - accuracy: 0.4650 - val_loss: 1.6444 - val_accuracy: 0.3736 - 2s/epoch - 9ms/step\n",
      "Epoch 6/100\n",
      "288/288 - 2s - loss: 1.3561 - accuracy: 0.4822 - val_loss: 1.7929 - val_accuracy: 0.3447 - 2s/epoch - 8ms/step\n",
      "Epoch 7/100\n",
      "288/288 - 3s - loss: 1.3100 - accuracy: 0.5028 - val_loss: 1.6566 - val_accuracy: 0.3821 - 3s/epoch - 9ms/step\n",
      "Epoch 8/100\n",
      "288/288 - 3s - loss: 1.2683 - accuracy: 0.5211 - val_loss: 2.2199 - val_accuracy: 0.2988 - 3s/epoch - 9ms/step\n",
      "Epoch 9/100\n",
      "288/288 - 3s - loss: 1.2268 - accuracy: 0.5359 - val_loss: 1.6737 - val_accuracy: 0.4037 - 3s/epoch - 9ms/step\n",
      "Epoch 10/100\n",
      "288/288 - 2s - loss: 1.1835 - accuracy: 0.5536 - val_loss: 2.0423 - val_accuracy: 0.3332 - 2s/epoch - 9ms/step\n",
      "Epoch 11/100\n",
      "288/288 - 2s - loss: 1.1459 - accuracy: 0.5720 - val_loss: 1.8560 - val_accuracy: 0.3518 - 2s/epoch - 9ms/step\n",
      "Epoch 12/100\n",
      "288/288 - 2s - loss: 1.1050 - accuracy: 0.5830 - val_loss: 1.9807 - val_accuracy: 0.3388 - 2s/epoch - 8ms/step\n",
      "Epoch 13/100\n",
      "288/288 - 2s - loss: 1.0750 - accuracy: 0.5975 - val_loss: 2.2341 - val_accuracy: 0.3617 - 2s/epoch - 8ms/step\n",
      "Epoch 14/100\n",
      "288/288 - 3s - loss: 1.0467 - accuracy: 0.6082 - val_loss: 1.9554 - val_accuracy: 0.3874 - 3s/epoch - 11ms/step\n",
      "Epoch 15/100\n",
      "288/288 - 4s - loss: 0.9992 - accuracy: 0.6299 - val_loss: 2.5426 - val_accuracy: 0.3731 - 4s/epoch - 16ms/step\n",
      "Epoch 16/100\n",
      "288/288 - 5s - loss: 0.9785 - accuracy: 0.6359 - val_loss: 2.3434 - val_accuracy: 0.3050 - 5s/epoch - 18ms/step\n",
      "Epoch 17/100\n",
      "288/288 - 6s - loss: 0.9411 - accuracy: 0.6498 - val_loss: 2.1351 - val_accuracy: 0.4036 - 6s/epoch - 22ms/step\n",
      "Epoch 18/100\n",
      "288/288 - 4s - loss: 0.9058 - accuracy: 0.6656 - val_loss: 1.9590 - val_accuracy: 0.4163 - 4s/epoch - 12ms/step\n",
      "Epoch 19/100\n",
      "288/288 - 5s - loss: 0.8692 - accuracy: 0.6798 - val_loss: 2.3396 - val_accuracy: 0.3700 - 5s/epoch - 16ms/step\n",
      "Epoch 20/100\n",
      "288/288 - 3s - loss: 0.8532 - accuracy: 0.6872 - val_loss: 2.2429 - val_accuracy: 0.4043 - 3s/epoch - 9ms/step\n",
      "Epoch 21/100\n",
      "288/288 - 3s - loss: 0.8157 - accuracy: 0.7052 - val_loss: 2.2831 - val_accuracy: 0.4043 - 3s/epoch - 12ms/step\n",
      "Epoch 22/100\n",
      "288/288 - 3s - loss: 0.7895 - accuracy: 0.7130 - val_loss: 2.5373 - val_accuracy: 0.3681 - 3s/epoch - 9ms/step\n",
      "Epoch 23/100\n",
      "288/288 - 3s - loss: 0.7778 - accuracy: 0.7180 - val_loss: 2.4368 - val_accuracy: 0.3890 - 3s/epoch - 10ms/step\n",
      "Epoch 24/100\n",
      "288/288 - 4s - loss: 0.7584 - accuracy: 0.7258 - val_loss: 2.5267 - val_accuracy: 0.3929 - 4s/epoch - 12ms/step\n",
      "Epoch 25/100\n",
      "288/288 - 3s - loss: 0.7260 - accuracy: 0.7369 - val_loss: 2.2710 - val_accuracy: 0.4081 - 3s/epoch - 11ms/step\n",
      "Epoch 26/100\n",
      "288/288 - 4s - loss: 0.7112 - accuracy: 0.7456 - val_loss: 2.4162 - val_accuracy: 0.3901 - 4s/epoch - 13ms/step\n",
      "Epoch 27/100\n",
      "288/288 - 3s - loss: 0.6892 - accuracy: 0.7514 - val_loss: 2.8467 - val_accuracy: 0.4100 - 3s/epoch - 10ms/step\n",
      "Epoch 28/100\n",
      "288/288 - 3s - loss: 0.6622 - accuracy: 0.7666 - val_loss: 2.4277 - val_accuracy: 0.4172 - 3s/epoch - 10ms/step\n",
      "Epoch 29/100\n",
      "288/288 - 3s - loss: 0.6481 - accuracy: 0.7670 - val_loss: 2.4597 - val_accuracy: 0.4270 - 3s/epoch - 11ms/step\n",
      "Epoch 30/100\n",
      "288/288 - 2s - loss: 0.6191 - accuracy: 0.7802 - val_loss: 2.2793 - val_accuracy: 0.4244 - 2s/epoch - 8ms/step\n",
      "Epoch 31/100\n",
      "288/288 - 2s - loss: 0.6120 - accuracy: 0.7824 - val_loss: 3.3193 - val_accuracy: 0.3796 - 2s/epoch - 9ms/step\n",
      "Epoch 32/100\n",
      "288/288 - 2s - loss: 0.6246 - accuracy: 0.7822 - val_loss: 2.6254 - val_accuracy: 0.4203 - 2s/epoch - 8ms/step\n",
      "Epoch 33/100\n",
      "288/288 - 3s - loss: 0.5807 - accuracy: 0.7938 - val_loss: 3.6382 - val_accuracy: 0.3958 - 3s/epoch - 9ms/step\n",
      "Epoch 34/100\n",
      "288/288 - 3s - loss: 0.5911 - accuracy: 0.7941 - val_loss: 2.3026 - val_accuracy: 0.4487 - 3s/epoch - 9ms/step\n",
      "Epoch 35/100\n",
      "288/288 - 4s - loss: 0.5292 - accuracy: 0.8156 - val_loss: 3.5149 - val_accuracy: 0.3537 - 4s/epoch - 16ms/step\n",
      "Epoch 36/100\n",
      "288/288 - 5s - loss: 0.5525 - accuracy: 0.8080 - val_loss: 3.2357 - val_accuracy: 0.3924 - 5s/epoch - 19ms/step\n",
      "Epoch 37/100\n",
      "288/288 - 4s - loss: 0.5412 - accuracy: 0.8120 - val_loss: 2.4759 - val_accuracy: 0.4330 - 4s/epoch - 13ms/step\n",
      "Epoch 38/100\n",
      "288/288 - 4s - loss: 0.5079 - accuracy: 0.8226 - val_loss: 7.5166 - val_accuracy: 0.2767 - 4s/epoch - 14ms/step\n",
      "Epoch 39/100\n",
      "288/288 - 3s - loss: 0.5819 - accuracy: 0.8029 - val_loss: 2.6665 - val_accuracy: 0.4358 - 3s/epoch - 11ms/step\n",
      "Epoch 40/100\n",
      "288/288 - 2s - loss: 0.5068 - accuracy: 0.8263 - val_loss: 2.6268 - val_accuracy: 0.4434 - 2s/epoch - 9ms/step\n",
      "Epoch 41/100\n",
      "288/288 - 5s - loss: 0.4750 - accuracy: 0.8382 - val_loss: 3.5144 - val_accuracy: 0.4039 - 5s/epoch - 19ms/step\n",
      "Epoch 42/100\n",
      "288/288 - 3s - loss: 0.4857 - accuracy: 0.8341 - val_loss: 3.2927 - val_accuracy: 0.3805 - 3s/epoch - 12ms/step\n",
      "Epoch 43/100\n",
      "288/288 - 3s - loss: 0.4640 - accuracy: 0.8438 - val_loss: 3.2051 - val_accuracy: 0.4108 - 3s/epoch - 11ms/step\n",
      "Epoch 44/100\n",
      "288/288 - 3s - loss: 0.4587 - accuracy: 0.8445 - val_loss: 3.2420 - val_accuracy: 0.4160 - 3s/epoch - 11ms/step\n",
      "Epoch 45/100\n",
      "288/288 - 3s - loss: 0.4536 - accuracy: 0.8451 - val_loss: 2.7053 - val_accuracy: 0.4468 - 3s/epoch - 10ms/step\n",
      "Epoch 46/100\n",
      "288/288 - 3s - loss: 0.4183 - accuracy: 0.8587 - val_loss: 2.6974 - val_accuracy: 0.4475 - 3s/epoch - 10ms/step\n",
      "Epoch 47/100\n",
      "288/288 - 3s - loss: 0.4064 - accuracy: 0.8626 - val_loss: 2.7814 - val_accuracy: 0.4411 - 3s/epoch - 11ms/step\n",
      "Epoch 48/100\n",
      "288/288 - 3s - loss: 0.4002 - accuracy: 0.8672 - val_loss: 4.1970 - val_accuracy: 0.3748 - 3s/epoch - 11ms/step\n",
      "Epoch 49/100\n",
      "288/288 - 3s - loss: 0.4453 - accuracy: 0.8529 - val_loss: 3.0865 - val_accuracy: 0.4298 - 3s/epoch - 10ms/step\n",
      "Epoch 50/100\n",
      "288/288 - 3s - loss: 0.3993 - accuracy: 0.8697 - val_loss: 3.1246 - val_accuracy: 0.4365 - 3s/epoch - 11ms/step\n",
      "Epoch 51/100\n",
      "288/288 - 3s - loss: 0.3968 - accuracy: 0.8682 - val_loss: 2.9135 - val_accuracy: 0.4475 - 3s/epoch - 9ms/step\n",
      "Epoch 52/100\n",
      "288/288 - 3s - loss: 0.3890 - accuracy: 0.8722 - val_loss: 2.8715 - val_accuracy: 0.4429 - 3s/epoch - 9ms/step\n",
      "Epoch 53/100\n",
      "288/288 - 3s - loss: 0.3742 - accuracy: 0.8778 - val_loss: 3.6493 - val_accuracy: 0.3926 - 3s/epoch - 11ms/step\n",
      "Epoch 54/100\n",
      "288/288 - 3s - loss: 0.3795 - accuracy: 0.8776 - val_loss: 3.1720 - val_accuracy: 0.4473 - 3s/epoch - 10ms/step\n",
      "Epoch 55/100\n",
      "288/288 - 2s - loss: 0.3724 - accuracy: 0.8776 - val_loss: 2.9722 - val_accuracy: 0.4446 - 2s/epoch - 8ms/step\n",
      "Epoch 56/100\n",
      "288/288 - 3s - loss: 0.3501 - accuracy: 0.8881 - val_loss: 5.4650 - val_accuracy: 0.3817 - 3s/epoch - 10ms/step\n",
      "Epoch 57/100\n",
      "288/288 - 3s - loss: 0.3834 - accuracy: 0.8789 - val_loss: 3.0991 - val_accuracy: 0.4465 - 3s/epoch - 10ms/step\n",
      "Epoch 58/100\n",
      "288/288 - 3s - loss: 0.3469 - accuracy: 0.8879 - val_loss: 3.0976 - val_accuracy: 0.4322 - 3s/epoch - 9ms/step\n",
      "Epoch 59/100\n",
      "288/288 - 3s - loss: 0.3492 - accuracy: 0.8873 - val_loss: 3.0072 - val_accuracy: 0.4459 - 3s/epoch - 12ms/step\n",
      "Epoch 60/100\n",
      "288/288 - 4s - loss: 0.3202 - accuracy: 0.8973 - val_loss: 3.7062 - val_accuracy: 0.4071 - 4s/epoch - 12ms/step\n",
      "Epoch 61/100\n",
      "288/288 - 4s - loss: 0.3590 - accuracy: 0.8831 - val_loss: 6.4435 - val_accuracy: 0.3215 - 4s/epoch - 12ms/step\n",
      "Epoch 62/100\n",
      "288/288 - 3s - loss: 0.3732 - accuracy: 0.8871 - val_loss: 3.2643 - val_accuracy: 0.4454 - 3s/epoch - 10ms/step\n",
      "Epoch 63/100\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[21], line 25\u001b[0m\n\u001b[1;32m     21\u001b[0m model_FFNN\u001b[38;5;241m.\u001b[39mcompile(loss\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategorical_crossentropy\u001b[39m\u001b[38;5;124m'\u001b[39m, optimizer\u001b[38;5;241m=\u001b[39msgd, metrics\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m     23\u001b[0m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mseed(\u001b[38;5;241m21\u001b[39m)\n\u001b[0;32m---> 25\u001b[0m history \u001b[38;5;241m=\u001b[39m model_FFNN\u001b[38;5;241m.\u001b[39mfit(Z_train, Y_train_vec, epochs\u001b[38;5;241m=\u001b[39mepochs, \n\u001b[1;32m     26\u001b[0m                     validation_data\u001b[38;5;241m=\u001b[39m(Z_test, Y_test_vec), batch_size\u001b[38;5;241m=\u001b[39mbatch_size, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/engine/training.py:1685\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1677\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mTrace(\n\u001b[1;32m   1678\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrain\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1679\u001b[0m     epoch_num\u001b[38;5;241m=\u001b[39mepoch,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1682\u001b[0m     _r\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[1;32m   1683\u001b[0m ):\n\u001b[1;32m   1684\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_begin(step)\n\u001b[0;32m-> 1685\u001b[0m     tmp_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrain_function(iterator)\n\u001b[1;32m   1686\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data_handler\u001b[38;5;241m.\u001b[39mshould_sync:\n\u001b[1;32m   1687\u001b[0m         context\u001b[38;5;241m.\u001b[39masync_wait()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:894\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    891\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    893\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 894\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    896\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    897\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:926\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    923\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    924\u001b[0m   \u001b[38;5;66;03m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    925\u001b[0m   \u001b[38;5;66;03m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 926\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_no_variable_creation_fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)  \u001b[38;5;66;03m# pylint: disable=not-callable\u001b[39;00m\n\u001b[1;32m    927\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_variable_creation_fn \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    928\u001b[0m   \u001b[38;5;66;03m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    929\u001b[0m   \u001b[38;5;66;03m# in parallel.\u001b[39;00m\n\u001b[1;32m    930\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py:143\u001b[0m, in \u001b[0;36mTracingCompiler.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    141\u001b[0m   (concrete_function,\n\u001b[1;32m    142\u001b[0m    filtered_flat_args) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m--> 143\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m concrete_function\u001b[38;5;241m.\u001b[39m_call_flat(\n\u001b[1;32m    144\u001b[0m     filtered_flat_args, captured_inputs\u001b[38;5;241m=\u001b[39mconcrete_function\u001b[38;5;241m.\u001b[39mcaptured_inputs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1757\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1753\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1754\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1755\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1756\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1757\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_call_outputs(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inference_function\u001b[38;5;241m.\u001b[39mcall(\n\u001b[1;32m   1758\u001b[0m       ctx, args, cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager))\n\u001b[1;32m   1759\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1760\u001b[0m     args,\n\u001b[1;32m   1761\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1762\u001b[0m     executing_eagerly)\n\u001b[1;32m   1763\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:381\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _InterpolateFunctionError(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    380\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m cancellation_manager \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 381\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute(\n\u001b[1;32m    382\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    383\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[1;32m    384\u001b[0m         inputs\u001b[38;5;241m=\u001b[39margs,\n\u001b[1;32m    385\u001b[0m         attrs\u001b[38;5;241m=\u001b[39mattrs,\n\u001b[1;32m    386\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx)\n\u001b[1;32m    387\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    388\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    389\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    390\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    393\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx,\n\u001b[1;32m    394\u001b[0m         cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/execute.py:52\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     51\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 52\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[1;32m     53\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     55\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "epochs = 100\n",
    "batch_size = 100\n",
    "n_neurons_layer1 = 400\n",
    "n_neurons_layer2 = 160\n",
    "n_neurons_layer3 = 64\n",
    "\n",
    "n_categories = 7\n",
    "eta=1.e-1\n",
    "lmbd=1.e-5\n",
    "\n",
    "model_FFNN = Sequential()\n",
    "model_FFNN.add(Dense(n_neurons_layer1, activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model_FFNN.add(Dropout(rate=0.05))\n",
    "model_FFNN.add(Dense(n_neurons_layer2, activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model_FFNN.add(Dropout(rate=0.05))\n",
    "model_FFNN.add(Dense(n_neurons_layer3, activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "\n",
    "model_FFNN.add(Dense(n_categories, activation='softmax'))\n",
    "\n",
    "sgd = optimizers.SGD(learning_rate=eta)\n",
    "model_FFNN.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n",
    "\n",
    "np.random.seed(21)\n",
    "\n",
    "history = model_FFNN.fit(Z_train, Y_train_vec, epochs=epochs, \n",
    "                    validation_data=(Z_test, Y_test_vec), batch_size=batch_size, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d289359-8cdd-4cdf-b314-2f87805d470b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.linspace(0,len(history.history[\"loss\"])-1, num=len(history.history[\"loss\"]))\n",
    "sns.set_theme(style=\"whitegrid\")\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.plot(history.history['accuracy'], color='mediumblue', label='acc')\n",
    "plt.plot(history.history['val_accuracy'],  color='orange', label = 'val_acc')\n",
    "plt.scatter(x, history.history['accuracy'], marker='+', color='mediumblue')\n",
    "plt.scatter(x, history.history['val_accuracy'], marker='+', color='orange')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy and Loss')\n",
    "\n",
    "plt.grid(True)\n",
    "plt.legend(loc='lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2b2ad88-265b-4af3-9838-3690340418ec",
   "metadata": {},
   "source": [
    "### CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cc28b15e-c20d-4213-8ce7-a0ca6d1eaf66",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-11 16:00:32.895885: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras import datasets, layers, models\n",
    "from tensorflow.keras.layers import Input,Conv2D,BatchNormalization,MaxPooling2D,Dropout,Flatten\n",
    "from tensorflow.keras.models import Sequential      #This allows appending layers to existing models\n",
    "from tensorflow.keras.layers import Dense           #This allows defining the characteristics of a particular layer\n",
    "from tensorflow.keras import optimizers             #This allows using whichever optimiser we want (sgd,adam,RMSprop)\n",
    "from tensorflow.keras import regularizers           #This allows using whichever regularizer we want (l1,l2,l1_l2)\n",
    "from tensorflow.keras.utils import to_categorical \n",
    "import tensorflow as tf\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "eta=0.001\n",
    "lmbd=0.0001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a308a14f-d25e-42fd-a759-4010b746bace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28273, 48, 48)\n",
      "(28273,)\n",
      "(7067, 48, 48)\n",
      "(7067,)\n"
     ]
    }
   ],
   "source": [
    "Y_train_vec=to_categorical(Y_train)\n",
    "Y_test_vec=to_categorical(Y_test)\n",
    "\n",
    "print(X_train.shape)\n",
    "print(Y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d93169e8-016c-4942-803f-ef1426daedb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_16 (Conv2D)          (None, 48, 48, 25)        250       \n",
      "                                                                 \n",
      " batch_normalization_24 (Bat  (None, 48, 48, 25)       100       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " max_pooling2d_16 (MaxPoolin  (None, 24, 24, 25)       0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " dropout_24 (Dropout)        (None, 24, 24, 25)        0         \n",
      "                                                                 \n",
      " conv2d_17 (Conv2D)          (None, 24, 24, 50)        31300     \n",
      "                                                                 \n",
      " batch_normalization_25 (Bat  (None, 24, 24, 50)       200       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " max_pooling2d_17 (MaxPoolin  (None, 12, 12, 50)       0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " dropout_25 (Dropout)        (None, 12, 12, 50)        0         \n",
      "                                                                 \n",
      " conv2d_18 (Conv2D)          (None, 12, 12, 200)       90200     \n",
      "                                                                 \n",
      " batch_normalization_26 (Bat  (None, 12, 12, 200)      800       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " max_pooling2d_18 (MaxPoolin  (None, 6, 6, 200)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " dropout_26 (Dropout)        (None, 6, 6, 200)         0         \n",
      "                                                                 \n",
      " conv2d_19 (Conv2D)          (None, 6, 6, 200)         360200    \n",
      "                                                                 \n",
      " batch_normalization_27 (Bat  (None, 6, 6, 200)        800       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " max_pooling2d_19 (MaxPoolin  (None, 3, 3, 200)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " dropout_27 (Dropout)        (None, 3, 3, 200)         0         \n",
      "                                                                 \n",
      " flatten_4 (Flatten)         (None, 1800)              0         \n",
      "                                                                 \n",
      " dense_12 (Dense)            (None, 100)               180100    \n",
      "                                                                 \n",
      " batch_normalization_28 (Bat  (None, 100)              400       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_28 (Dropout)        (None, 100)               0         \n",
      "                                                                 \n",
      " dense_13 (Dense)            (None, 200)               20200     \n",
      "                                                                 \n",
      " batch_normalization_29 (Bat  (None, 200)              800       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_29 (Dropout)        (None, 200)               0         \n",
      "                                                                 \n",
      " dense_14 (Dense)            (None, 6)                 1206      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 686,556\n",
      "Trainable params: 685,006\n",
      "Non-trainable params: 1,550\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# 1 - Convolution\n",
    "model.add(Conv2D(25,(3,3), padding='same',activation='relu', input_shape=(48, 48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 2nd Convolution layer\n",
    "model.add(Conv2D(50,(5,5),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 3rd Convolution layer\n",
    "model.add(Conv2D(200,(3,3),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 4th Convolution layer\n",
    "model.add(Conv2D(200,(3,3),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Flattening\n",
    "model.add(Flatten())\n",
    "\n",
    "# Fully connected layer 1st layer\n",
    "model.add(Dense(100,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Fully connected layer 2nd layer\n",
    "model.add(Dense(200,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "sgd = optimizers.SGD(learning_rate=eta)\n",
    "model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5926351d-bde7-4a8d-bafd-0845bcbb554b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "442/442 - 137s - loss: 2.4150 - accuracy: 0.1878 - val_loss: 2.0016 - val_accuracy: 0.2516 - 137s/epoch - 309ms/step\n",
      "Epoch 2/30\n",
      "442/442 - 155s - loss: 2.2017 - accuracy: 0.2086 - val_loss: 1.7590 - val_accuracy: 0.2742 - 155s/epoch - 352ms/step\n",
      "Epoch 3/30\n",
      "442/442 - 148s - loss: 2.0980 - accuracy: 0.2182 - val_loss: 1.7291 - val_accuracy: 0.2788 - 148s/epoch - 335ms/step\n",
      "Epoch 4/30\n",
      "442/442 - 186s - loss: 2.0234 - accuracy: 0.2258 - val_loss: 1.7216 - val_accuracy: 0.2812 - 186s/epoch - 421ms/step\n",
      "Epoch 5/30\n",
      "442/442 - 145s - loss: 1.9687 - accuracy: 0.2328 - val_loss: 1.7126 - val_accuracy: 0.2904 - 145s/epoch - 329ms/step\n",
      "Epoch 6/30\n",
      "442/442 - 137s - loss: 1.9422 - accuracy: 0.2335 - val_loss: 1.7108 - val_accuracy: 0.2909 - 137s/epoch - 310ms/step\n",
      "Epoch 7/30\n",
      "442/442 - 133s - loss: 1.9014 - accuracy: 0.2445 - val_loss: 1.6995 - val_accuracy: 0.3008 - 133s/epoch - 301ms/step\n",
      "Epoch 8/30\n",
      "442/442 - 133s - loss: 1.8738 - accuracy: 0.2516 - val_loss: 1.6917 - val_accuracy: 0.2973 - 133s/epoch - 300ms/step\n",
      "Epoch 9/30\n",
      "442/442 - 133s - loss: 1.8495 - accuracy: 0.2628 - val_loss: 1.6674 - val_accuracy: 0.3102 - 133s/epoch - 302ms/step\n",
      "Epoch 10/30\n",
      "442/442 - 134s - loss: 1.8216 - accuracy: 0.2687 - val_loss: 1.6739 - val_accuracy: 0.3180 - 134s/epoch - 303ms/step\n",
      "Epoch 11/30\n",
      "442/442 - 132s - loss: 1.7992 - accuracy: 0.2795 - val_loss: 1.6851 - val_accuracy: 0.3013 - 132s/epoch - 299ms/step\n",
      "Epoch 12/30\n",
      "442/442 - 134s - loss: 1.7834 - accuracy: 0.2859 - val_loss: 1.6489 - val_accuracy: 0.3290 - 134s/epoch - 302ms/step\n",
      "Epoch 13/30\n",
      "442/442 - 134s - loss: 1.7696 - accuracy: 0.2910 - val_loss: 1.6338 - val_accuracy: 0.3402 - 134s/epoch - 304ms/step\n",
      "Epoch 14/30\n",
      "442/442 - 133s - loss: 1.7508 - accuracy: 0.2942 - val_loss: 1.6148 - val_accuracy: 0.3511 - 133s/epoch - 300ms/step\n",
      "Epoch 15/30\n",
      "442/442 - 134s - loss: 1.7308 - accuracy: 0.3065 - val_loss: 1.5984 - val_accuracy: 0.3610 - 134s/epoch - 302ms/step\n",
      "Epoch 16/30\n",
      "442/442 - 133s - loss: 1.7176 - accuracy: 0.3068 - val_loss: 1.6358 - val_accuracy: 0.3371 - 133s/epoch - 302ms/step\n",
      "Epoch 17/30\n",
      "442/442 - 136s - loss: 1.6970 - accuracy: 0.3189 - val_loss: 1.6444 - val_accuracy: 0.3373 - 136s/epoch - 308ms/step\n",
      "Epoch 18/30\n",
      "442/442 - 133s - loss: 1.6821 - accuracy: 0.3273 - val_loss: 1.5856 - val_accuracy: 0.3644 - 133s/epoch - 300ms/step\n",
      "Epoch 19/30\n",
      "442/442 - 134s - loss: 1.6759 - accuracy: 0.3265 - val_loss: 1.5626 - val_accuracy: 0.3785 - 134s/epoch - 304ms/step\n",
      "Epoch 20/30\n",
      "442/442 - 135s - loss: 1.6606 - accuracy: 0.3332 - val_loss: 1.5923 - val_accuracy: 0.3598 - 135s/epoch - 306ms/step\n",
      "Epoch 21/30\n",
      "442/442 - 133s - loss: 1.6498 - accuracy: 0.3409 - val_loss: 1.5865 - val_accuracy: 0.3644 - 133s/epoch - 301ms/step\n",
      "Epoch 22/30\n",
      "442/442 - 133s - loss: 1.6413 - accuracy: 0.3422 - val_loss: 1.6256 - val_accuracy: 0.3528 - 133s/epoch - 302ms/step\n",
      "Epoch 23/30\n",
      "442/442 - 138s - loss: 1.6297 - accuracy: 0.3492 - val_loss: 1.5482 - val_accuracy: 0.3852 - 138s/epoch - 312ms/step\n",
      "Epoch 24/30\n",
      "442/442 - 144s - loss: 1.6202 - accuracy: 0.3491 - val_loss: 1.5095 - val_accuracy: 0.4016 - 144s/epoch - 325ms/step\n",
      "Epoch 25/30\n",
      "442/442 - 134s - loss: 1.6105 - accuracy: 0.3575 - val_loss: 1.5517 - val_accuracy: 0.3798 - 134s/epoch - 302ms/step\n",
      "Epoch 26/30\n",
      "442/442 - 134s - loss: 1.5955 - accuracy: 0.3606 - val_loss: 1.5901 - val_accuracy: 0.3730 - 134s/epoch - 304ms/step\n",
      "Epoch 27/30\n",
      "442/442 - 134s - loss: 1.5847 - accuracy: 0.3632 - val_loss: 1.4844 - val_accuracy: 0.4115 - 134s/epoch - 302ms/step\n",
      "Epoch 28/30\n",
      "442/442 - 292s - loss: 1.5780 - accuracy: 0.3711 - val_loss: 1.4748 - val_accuracy: 0.4176 - 292s/epoch - 662ms/step\n",
      "Epoch 29/30\n",
      "442/442 - 159s - loss: 1.5642 - accuracy: 0.3777 - val_loss: 1.5061 - val_accuracy: 0.4000 - 159s/epoch - 359ms/step\n",
      "Epoch 30/30\n",
      "442/442 - 134s - loss: 1.5561 - accuracy: 0.3752 - val_loss: 1.4592 - val_accuracy: 0.4288 - 134s/epoch - 303ms/step\n"
     ]
    }
   ],
   "source": [
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "np.random.seed(21)\n",
    "\n",
    "history = model.fit(X_train/255., Y_train_vec, epochs=30, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5ae73923-52db-40cb-9226-3530b31301cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save_weights('./checkpoints/CNN_1_c1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7a25bc2e-da2d-4c2e-91d5-89d073b3e71f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "442/442 - 134s - loss: 1.5489 - accuracy: 0.3805 - val_loss: 1.5317 - val_accuracy: 0.3812 - 134s/epoch - 304ms/step\n",
      "Epoch 2/30\n",
      "442/442 - 162s - loss: 1.5434 - accuracy: 0.3819 - val_loss: 1.6287 - val_accuracy: 0.3671 - 162s/epoch - 366ms/step\n",
      "Epoch 3/30\n",
      "442/442 - 142s - loss: 1.5299 - accuracy: 0.3881 - val_loss: 1.6378 - val_accuracy: 0.3651 - 142s/epoch - 322ms/step\n",
      "Epoch 4/30\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[24], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mfit(X_train\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_train_vec, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m30\u001b[39m, \n\u001b[1;32m      2\u001b[0m                     validation_data\u001b[38;5;241m=\u001b[39m(X_test\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_test_vec), batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m64\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/engine/training.py:1685\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1677\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mTrace(\n\u001b[1;32m   1678\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrain\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1679\u001b[0m     epoch_num\u001b[38;5;241m=\u001b[39mepoch,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1682\u001b[0m     _r\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[1;32m   1683\u001b[0m ):\n\u001b[1;32m   1684\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_begin(step)\n\u001b[0;32m-> 1685\u001b[0m     tmp_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrain_function(iterator)\n\u001b[1;32m   1686\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data_handler\u001b[38;5;241m.\u001b[39mshould_sync:\n\u001b[1;32m   1687\u001b[0m         context\u001b[38;5;241m.\u001b[39masync_wait()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:894\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    891\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    893\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 894\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    896\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    897\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:926\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    923\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    924\u001b[0m   \u001b[38;5;66;03m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    925\u001b[0m   \u001b[38;5;66;03m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 926\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_no_variable_creation_fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)  \u001b[38;5;66;03m# pylint: disable=not-callable\u001b[39;00m\n\u001b[1;32m    927\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_variable_creation_fn \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    928\u001b[0m   \u001b[38;5;66;03m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    929\u001b[0m   \u001b[38;5;66;03m# in parallel.\u001b[39;00m\n\u001b[1;32m    930\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py:143\u001b[0m, in \u001b[0;36mTracingCompiler.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    141\u001b[0m   (concrete_function,\n\u001b[1;32m    142\u001b[0m    filtered_flat_args) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m--> 143\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m concrete_function\u001b[38;5;241m.\u001b[39m_call_flat(\n\u001b[1;32m    144\u001b[0m     filtered_flat_args, captured_inputs\u001b[38;5;241m=\u001b[39mconcrete_function\u001b[38;5;241m.\u001b[39mcaptured_inputs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1757\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1753\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1754\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1755\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1756\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1757\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_call_outputs(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inference_function\u001b[38;5;241m.\u001b[39mcall(\n\u001b[1;32m   1758\u001b[0m       ctx, args, cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager))\n\u001b[1;32m   1759\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1760\u001b[0m     args,\n\u001b[1;32m   1761\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1762\u001b[0m     executing_eagerly)\n\u001b[1;32m   1763\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:381\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _InterpolateFunctionError(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    380\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m cancellation_manager \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 381\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute(\n\u001b[1;32m    382\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    383\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[1;32m    384\u001b[0m         inputs\u001b[38;5;241m=\u001b[39margs,\n\u001b[1;32m    385\u001b[0m         attrs\u001b[38;5;241m=\u001b[39mattrs,\n\u001b[1;32m    386\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx)\n\u001b[1;32m    387\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    388\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    389\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    390\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    393\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx,\n\u001b[1;32m    394\u001b[0m         cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/execute.py:52\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     51\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 52\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[1;32m     53\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     55\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train/255., Y_train_vec, epochs=30, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f092152-7efd-4575-80ac-8bd8bc23e447",
   "metadata": {},
   "source": [
    "### CNN 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bef7e73a-7fb9-4a8b-bb4d-de73c5c909d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-11 16:00:37.032768: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 46, 46, 25)        250       \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 46, 46, 25)       100       \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 23, 23, 25)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 23, 23, 25)        0         \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 20, 20, 50)        20050     \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 20, 20, 50)       200       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 10, 10, 50)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 10, 10, 50)        0         \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 8, 8, 150)         67650     \n",
      "                                                                 \n",
      " batch_normalization_2 (Batc  (None, 8, 8, 150)        600       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 4, 4, 150)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 4, 4, 150)         0         \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 2, 2, 200)         270200    \n",
      "                                                                 \n",
      " batch_normalization_3 (Batc  (None, 2, 2, 200)        800       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 1, 1, 200)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_3 (Dropout)         (None, 1, 1, 200)         0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 200)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 100)               20100     \n",
      "                                                                 \n",
      " batch_normalization_4 (Batc  (None, 100)              400       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_4 (Dropout)         (None, 100)               0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 200)               20200     \n",
      "                                                                 \n",
      " batch_normalization_5 (Batc  (None, 200)              800       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_5 (Dropout)         (None, 200)               0         \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 6)                 1206      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 402,556\n",
      "Trainable params: 401,106\n",
      "Non-trainable params: 1,450\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# 1 - Convolution\n",
    "model.add(Conv2D(25,(3,3), padding='valid',activation='relu', input_shape=(48, 48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "# 2nd Convolution layer\n",
    "model.add(Conv2D(50,(4,4),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "# 3rd Convolution layer\n",
    "model.add(Conv2D(150,(3,3),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "# 4th Convolution layer\n",
    "model.add(Conv2D(200,(3,3),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "# Flattening\n",
    "model.add(Flatten())\n",
    "\n",
    "# Fully connected layer 1st layer\n",
    "model.add(Dense(100,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "# Fully connected layer 2nd layer\n",
    "model.add(Dense(200,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.20))\n",
    "\n",
    "model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "opt = optimizers.SGD(learning_rate=eta)\n",
    "model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "81a43139-bbc8-47f9-963e-808c5f81aa46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "442/442 - 70s - loss: 2.3638 - accuracy: 0.1901 - val_loss: 1.8970 - val_accuracy: 0.2578 - 70s/epoch - 158ms/step\n",
      "Epoch 2/30\n",
      "442/442 - 70s - loss: 2.1716 - accuracy: 0.2034 - val_loss: 1.7734 - val_accuracy: 0.2783 - 70s/epoch - 157ms/step\n",
      "Epoch 3/30\n",
      "442/442 - 67s - loss: 2.0611 - accuracy: 0.2227 - val_loss: 1.7240 - val_accuracy: 0.2830 - 67s/epoch - 152ms/step\n",
      "Epoch 4/30\n",
      "442/442 - 68s - loss: 1.9903 - accuracy: 0.2337 - val_loss: 1.7128 - val_accuracy: 0.2887 - 68s/epoch - 153ms/step\n",
      "Epoch 5/30\n",
      "442/442 - 72s - loss: 1.9470 - accuracy: 0.2437 - val_loss: 1.7085 - val_accuracy: 0.2891 - 72s/epoch - 162ms/step\n",
      "Epoch 6/30\n",
      "442/442 - 71s - loss: 1.9149 - accuracy: 0.2447 - val_loss: 1.6917 - val_accuracy: 0.2976 - 71s/epoch - 161ms/step\n",
      "Epoch 7/30\n",
      "442/442 - 77s - loss: 1.8683 - accuracy: 0.2565 - val_loss: 1.6863 - val_accuracy: 0.3045 - 77s/epoch - 175ms/step\n",
      "Epoch 8/30\n",
      "442/442 - 71s - loss: 1.8400 - accuracy: 0.2685 - val_loss: 1.6233 - val_accuracy: 0.3379 - 71s/epoch - 160ms/step\n",
      "Epoch 9/30\n",
      "442/442 - 74s - loss: 1.8062 - accuracy: 0.2802 - val_loss: 1.6115 - val_accuracy: 0.3478 - 74s/epoch - 167ms/step\n",
      "Epoch 10/30\n",
      "442/442 - 68s - loss: 1.7795 - accuracy: 0.2906 - val_loss: 1.6559 - val_accuracy: 0.3154 - 68s/epoch - 153ms/step\n",
      "Epoch 11/30\n",
      "442/442 - 70s - loss: 1.7560 - accuracy: 0.3002 - val_loss: 1.5754 - val_accuracy: 0.3622 - 70s/epoch - 158ms/step\n",
      "Epoch 12/30\n",
      "442/442 - 70s - loss: 1.7392 - accuracy: 0.3083 - val_loss: 1.5738 - val_accuracy: 0.3758 - 70s/epoch - 159ms/step\n",
      "Epoch 13/30\n",
      "442/442 - 72s - loss: 1.7158 - accuracy: 0.3214 - val_loss: 1.5846 - val_accuracy: 0.3618 - 72s/epoch - 162ms/step\n",
      "Epoch 14/30\n",
      "442/442 - 71s - loss: 1.7007 - accuracy: 0.3214 - val_loss: 1.6700 - val_accuracy: 0.3320 - 71s/epoch - 161ms/step\n",
      "Epoch 15/30\n",
      "442/442 - 70s - loss: 1.6689 - accuracy: 0.3356 - val_loss: 1.5032 - val_accuracy: 0.4058 - 70s/epoch - 158ms/step\n",
      "Epoch 16/30\n",
      "442/442 - 70s - loss: 1.6523 - accuracy: 0.3444 - val_loss: 1.4948 - val_accuracy: 0.4075 - 70s/epoch - 159ms/step\n",
      "Epoch 17/30\n",
      "442/442 - 70s - loss: 1.6439 - accuracy: 0.3480 - val_loss: 1.5131 - val_accuracy: 0.3907 - 70s/epoch - 157ms/step\n",
      "Epoch 18/30\n",
      "442/442 - 88s - loss: 1.6286 - accuracy: 0.3530 - val_loss: 1.4818 - val_accuracy: 0.4126 - 88s/epoch - 198ms/step\n",
      "Epoch 19/30\n",
      "442/442 - 72s - loss: 1.6118 - accuracy: 0.3573 - val_loss: 1.5282 - val_accuracy: 0.3869 - 72s/epoch - 162ms/step\n",
      "Epoch 20/30\n",
      "442/442 - 71s - loss: 1.5935 - accuracy: 0.3628 - val_loss: 1.5052 - val_accuracy: 0.4012 - 71s/epoch - 160ms/step\n",
      "Epoch 21/30\n",
      "442/442 - 70s - loss: 1.5823 - accuracy: 0.3690 - val_loss: 1.4553 - val_accuracy: 0.4251 - 70s/epoch - 158ms/step\n",
      "Epoch 22/30\n",
      "442/442 - 71s - loss: 1.5697 - accuracy: 0.3733 - val_loss: 1.4302 - val_accuracy: 0.4351 - 71s/epoch - 160ms/step\n",
      "Epoch 23/30\n",
      "442/442 - 69s - loss: 1.5627 - accuracy: 0.3782 - val_loss: 1.5196 - val_accuracy: 0.3941 - 69s/epoch - 157ms/step\n",
      "Epoch 24/30\n",
      "442/442 - 70s - loss: 1.5491 - accuracy: 0.3800 - val_loss: 1.5763 - val_accuracy: 0.3791 - 70s/epoch - 158ms/step\n",
      "Epoch 25/30\n",
      "442/442 - 70s - loss: 1.5437 - accuracy: 0.3844 - val_loss: 1.4447 - val_accuracy: 0.4256 - 70s/epoch - 158ms/step\n",
      "Epoch 26/30\n",
      "442/442 - 71s - loss: 1.5338 - accuracy: 0.3845 - val_loss: 1.4115 - val_accuracy: 0.4382 - 71s/epoch - 160ms/step\n",
      "Epoch 27/30\n",
      "442/442 - 70s - loss: 1.5279 - accuracy: 0.3893 - val_loss: 1.4697 - val_accuracy: 0.4105 - 70s/epoch - 158ms/step\n",
      "Epoch 28/30\n",
      "442/442 - 73s - loss: 1.5170 - accuracy: 0.3958 - val_loss: 1.4077 - val_accuracy: 0.4409 - 73s/epoch - 164ms/step\n",
      "Epoch 29/30\n",
      "442/442 - 74s - loss: 1.5087 - accuracy: 0.3964 - val_loss: 1.4161 - val_accuracy: 0.4418 - 74s/epoch - 168ms/step\n",
      "Epoch 30/30\n",
      "442/442 - 69s - loss: 1.4998 - accuracy: 0.4009 - val_loss: 1.3857 - val_accuracy: 0.4467 - 69s/epoch - 157ms/step\n"
     ]
    }
   ],
   "source": [
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "np.random.seed(111)\n",
    "\n",
    "history = model.fit(X_train/255., Y_train_vec, epochs=30, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62b05342-0a9b-4417-b92f-c550f5bdbab5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "442/442 - 69s - loss: 1.4883 - accuracy: 0.4036 - val_loss: 1.3958 - val_accuracy: 0.4456 - 69s/epoch - 155ms/step\n",
      "Epoch 2/30\n",
      "442/442 - 69s - loss: 1.4801 - accuracy: 0.4105 - val_loss: 1.3806 - val_accuracy: 0.4528 - 69s/epoch - 155ms/step\n",
      "Epoch 3/30\n",
      "442/442 - 67s - loss: 1.4788 - accuracy: 0.4096 - val_loss: 1.3715 - val_accuracy: 0.4549 - 67s/epoch - 151ms/step\n",
      "Epoch 4/30\n",
      "442/442 - 67s - loss: 1.4720 - accuracy: 0.4127 - val_loss: 1.4564 - val_accuracy: 0.4289 - 67s/epoch - 153ms/step\n",
      "Epoch 5/30\n",
      "442/442 - 68s - loss: 1.4619 - accuracy: 0.4172 - val_loss: 1.3913 - val_accuracy: 0.4474 - 68s/epoch - 153ms/step\n",
      "Epoch 6/30\n",
      "442/442 - 69s - loss: 1.4549 - accuracy: 0.4195 - val_loss: 1.3542 - val_accuracy: 0.4712 - 69s/epoch - 155ms/step\n",
      "Epoch 7/30\n",
      "442/442 - 67s - loss: 1.4531 - accuracy: 0.4230 - val_loss: 1.4436 - val_accuracy: 0.4360 - 67s/epoch - 152ms/step\n",
      "Epoch 8/30\n",
      "442/442 - 69s - loss: 1.4427 - accuracy: 0.4239 - val_loss: 1.3654 - val_accuracy: 0.4575 - 69s/epoch - 155ms/step\n",
      "Epoch 9/30\n",
      "442/442 - 72s - loss: 1.4385 - accuracy: 0.4260 - val_loss: 1.3344 - val_accuracy: 0.4736 - 72s/epoch - 164ms/step\n",
      "Epoch 10/30\n",
      "442/442 - 67s - loss: 1.4361 - accuracy: 0.4261 - val_loss: 1.3733 - val_accuracy: 0.4609 - 67s/epoch - 152ms/step\n",
      "Epoch 11/30\n",
      "442/442 - 67s - loss: 1.4281 - accuracy: 0.4329 - val_loss: 1.3353 - val_accuracy: 0.4762 - 67s/epoch - 152ms/step\n",
      "Epoch 12/30\n",
      "442/442 - 68s - loss: 1.4256 - accuracy: 0.4339 - val_loss: 1.3286 - val_accuracy: 0.4779 - 68s/epoch - 153ms/step\n",
      "Epoch 13/30\n",
      "442/442 - 69s - loss: 1.4172 - accuracy: 0.4382 - val_loss: 1.4099 - val_accuracy: 0.4452 - 69s/epoch - 155ms/step\n",
      "Epoch 14/30\n",
      "442/442 - 74s - loss: 1.4176 - accuracy: 0.4380 - val_loss: 1.3193 - val_accuracy: 0.4804 - 74s/epoch - 167ms/step\n",
      "Epoch 15/30\n",
      "442/442 - 67s - loss: 1.4060 - accuracy: 0.4420 - val_loss: 1.3496 - val_accuracy: 0.4654 - 67s/epoch - 151ms/step\n",
      "Epoch 16/30\n",
      "442/442 - 67s - loss: 1.4017 - accuracy: 0.4426 - val_loss: 1.3125 - val_accuracy: 0.4805 - 67s/epoch - 152ms/step\n",
      "Epoch 17/30\n",
      "442/442 - 68s - loss: 1.3970 - accuracy: 0.4454 - val_loss: 1.3135 - val_accuracy: 0.4797 - 68s/epoch - 154ms/step\n",
      "Epoch 18/30\n",
      "442/442 - 72s - loss: 1.3930 - accuracy: 0.4498 - val_loss: 1.3362 - val_accuracy: 0.4696 - 72s/epoch - 164ms/step\n",
      "Epoch 19/30\n",
      "442/442 - 67s - loss: 1.3848 - accuracy: 0.4530 - val_loss: 1.3190 - val_accuracy: 0.4838 - 67s/epoch - 152ms/step\n",
      "Epoch 20/30\n",
      "442/442 - 68s - loss: 1.3827 - accuracy: 0.4496 - val_loss: 1.2923 - val_accuracy: 0.4946 - 68s/epoch - 155ms/step\n",
      "Epoch 21/30\n",
      "442/442 - 68s - loss: 1.3778 - accuracy: 0.4549 - val_loss: 1.2885 - val_accuracy: 0.4987 - 68s/epoch - 153ms/step\n",
      "Epoch 22/30\n",
      "442/442 - 69s - loss: 1.3766 - accuracy: 0.4580 - val_loss: 1.2935 - val_accuracy: 0.4906 - 69s/epoch - 155ms/step\n",
      "Epoch 23/30\n",
      "442/442 - 67s - loss: 1.3704 - accuracy: 0.4633 - val_loss: 1.3575 - val_accuracy: 0.4658 - 67s/epoch - 152ms/step\n",
      "Epoch 24/30\n",
      "442/442 - 71s - loss: 1.3655 - accuracy: 0.4639 - val_loss: 1.2739 - val_accuracy: 0.5042 - 71s/epoch - 160ms/step\n",
      "Epoch 25/30\n",
      "442/442 - 70s - loss: 1.3639 - accuracy: 0.4616 - val_loss: 1.2706 - val_accuracy: 0.4984 - 70s/epoch - 158ms/step\n",
      "Epoch 26/30\n",
      "442/442 - 67s - loss: 1.3606 - accuracy: 0.4619 - val_loss: 1.2705 - val_accuracy: 0.4989 - 67s/epoch - 152ms/step\n",
      "Epoch 27/30\n",
      "442/442 - 74s - loss: 1.3487 - accuracy: 0.4657 - val_loss: 1.2900 - val_accuracy: 0.4958 - 74s/epoch - 167ms/step\n",
      "Epoch 28/30\n",
      "442/442 - 68s - loss: 1.3547 - accuracy: 0.4662 - val_loss: 1.2775 - val_accuracy: 0.4930 - 68s/epoch - 154ms/step\n",
      "Epoch 29/30\n",
      "442/442 - 76s - loss: 1.3490 - accuracy: 0.4687 - val_loss: 1.3135 - val_accuracy: 0.4835 - 76s/epoch - 172ms/step\n",
      "Epoch 30/30\n",
      "442/442 - 80s - loss: 1.3524 - accuracy: 0.4655 - val_loss: 1.2546 - val_accuracy: 0.5053 - 80s/epoch - 180ms/step\n"
     ]
    }
   ],
   "source": [
    "history_2 = model.fit(X_train/255., Y_train_vec, epochs=30, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f354f32-549d-444a-a682-7691f87e92e7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6a06f5c8-31d5-4d8b-a061-4bd77850baf7",
   "metadata": {},
   "source": [
    "### CNN 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5adea319-3500-4fab-9d39-b4b26f469ad4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_4 (Conv2D)           (None, 46, 46, 25)        250       \n",
      "                                                                 \n",
      " batch_normalization_6 (Batc  (None, 46, 46, 25)       100       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_4 (MaxPooling  (None, 23, 23, 25)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_6 (Dropout)         (None, 23, 23, 25)        0         \n",
      "                                                                 \n",
      " conv2d_5 (Conv2D)           (None, 20, 20, 50)        20050     \n",
      "                                                                 \n",
      " batch_normalization_7 (Batc  (None, 20, 20, 50)       200       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPooling  (None, 10, 10, 50)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_7 (Dropout)         (None, 10, 10, 50)        0         \n",
      "                                                                 \n",
      " conv2d_6 (Conv2D)           (None, 8, 8, 150)         67650     \n",
      "                                                                 \n",
      " batch_normalization_8 (Batc  (None, 8, 8, 150)        600       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_6 (MaxPooling  (None, 4, 4, 150)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_8 (Dropout)         (None, 4, 4, 150)         0         \n",
      "                                                                 \n",
      " conv2d_7 (Conv2D)           (None, 2, 2, 150)         202650    \n",
      "                                                                 \n",
      " batch_normalization_9 (Batc  (None, 2, 2, 150)        600       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_7 (MaxPooling  (None, 1, 1, 150)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_9 (Dropout)         (None, 1, 1, 150)         0         \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 150)               0         \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 100)               15100     \n",
      "                                                                 \n",
      " batch_normalization_10 (Bat  (None, 100)              400       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_10 (Dropout)        (None, 100)               0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 200)               20200     \n",
      "                                                                 \n",
      " batch_normalization_11 (Bat  (None, 200)              800       \n",
      " chNormalization)                                                \n",
      "                                                                 \n",
      " dropout_11 (Dropout)        (None, 200)               0         \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 6)                 1206      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 329,806\n",
      "Trainable params: 328,456\n",
      "Non-trainable params: 1,350\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# 1 - Convolution\n",
    "model.add(Conv2D(25,(3,3), padding='valid',activation='relu', input_shape=(48, 48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 2nd Convolution layer\n",
    "model.add(Conv2D(50,(4,4),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 3rd Convolution layer\n",
    "model.add(Conv2D(150,(3,3),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 4th Convolution layer\n",
    "model.add(Conv2D(150,(3,3),activation='relu', padding='valid'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Flattening\n",
    "model.add(Flatten())\n",
    "\n",
    "# Fully connected layer 1st layer\n",
    "model.add(Dense(100,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Fully connected layer 2nd layer\n",
    "model.add(Dense(200,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "opt = optimizers.SGD(learning_rate=eta)\n",
    "model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d1b0819-6954-41c0-9005-f37147890c94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/80\n",
      "442/442 - 67s - loss: 2.4530 - accuracy: 0.1915 - val_loss: 1.9192 - val_accuracy: 0.2115 - 67s/epoch - 151ms/step\n",
      "Epoch 2/80\n",
      "442/442 - 78s - loss: 2.2483 - accuracy: 0.1988 - val_loss: 1.8071 - val_accuracy: 0.2444 - 78s/epoch - 177ms/step\n",
      "Epoch 3/80\n",
      "442/442 - 67s - loss: 2.1355 - accuracy: 0.2048 - val_loss: 1.7929 - val_accuracy: 0.2592 - 67s/epoch - 153ms/step\n",
      "Epoch 4/80\n",
      "442/442 - 68s - loss: 2.0780 - accuracy: 0.2093 - val_loss: 1.7550 - val_accuracy: 0.2752 - 68s/epoch - 154ms/step\n",
      "Epoch 5/80\n",
      "442/442 - 66s - loss: 2.0152 - accuracy: 0.2162 - val_loss: 1.7287 - val_accuracy: 0.2783 - 66s/epoch - 150ms/step\n",
      "Epoch 6/80\n",
      "442/442 - 67s - loss: 1.9821 - accuracy: 0.2202 - val_loss: 1.7555 - val_accuracy: 0.2727 - 67s/epoch - 151ms/step\n",
      "Epoch 7/80\n",
      "442/442 - 70s - loss: 1.9586 - accuracy: 0.2177 - val_loss: 1.7284 - val_accuracy: 0.2792 - 70s/epoch - 159ms/step\n",
      "Epoch 8/80\n",
      "442/442 - 71s - loss: 1.9262 - accuracy: 0.2284 - val_loss: 1.7211 - val_accuracy: 0.2749 - 71s/epoch - 160ms/step\n",
      "Epoch 9/80\n",
      "442/442 - 71s - loss: 1.9012 - accuracy: 0.2328 - val_loss: 1.7039 - val_accuracy: 0.2802 - 71s/epoch - 161ms/step\n",
      "Epoch 10/80\n",
      "442/442 - 68s - loss: 1.8745 - accuracy: 0.2385 - val_loss: 1.6981 - val_accuracy: 0.2929 - 68s/epoch - 154ms/step\n",
      "Epoch 11/80\n",
      "442/442 - 70s - loss: 1.8597 - accuracy: 0.2460 - val_loss: 1.6804 - val_accuracy: 0.3034 - 70s/epoch - 159ms/step\n",
      "Epoch 12/80\n",
      "442/442 - 67s - loss: 1.8314 - accuracy: 0.2536 - val_loss: 1.6684 - val_accuracy: 0.3088 - 67s/epoch - 152ms/step\n",
      "Epoch 13/80\n",
      "442/442 - 67s - loss: 1.8147 - accuracy: 0.2643 - val_loss: 1.6578 - val_accuracy: 0.3139 - 67s/epoch - 152ms/step\n",
      "Epoch 14/80\n",
      "442/442 - 69s - loss: 1.7974 - accuracy: 0.2645 - val_loss: 1.6643 - val_accuracy: 0.3079 - 69s/epoch - 156ms/step\n",
      "Epoch 15/80\n",
      "442/442 - 68s - loss: 1.7829 - accuracy: 0.2749 - val_loss: 1.6252 - val_accuracy: 0.3386 - 68s/epoch - 153ms/step\n",
      "Epoch 16/80\n",
      "442/442 - 67s - loss: 1.7664 - accuracy: 0.2848 - val_loss: 1.6460 - val_accuracy: 0.3202 - 67s/epoch - 151ms/step\n",
      "Epoch 17/80\n",
      "442/442 - 68s - loss: 1.7462 - accuracy: 0.2949 - val_loss: 1.5975 - val_accuracy: 0.3495 - 68s/epoch - 153ms/step\n",
      "Epoch 18/80\n",
      "442/442 - 67s - loss: 1.7365 - accuracy: 0.2950 - val_loss: 1.5843 - val_accuracy: 0.3642 - 67s/epoch - 151ms/step\n",
      "Epoch 19/80\n",
      "442/442 - 67s - loss: 1.7157 - accuracy: 0.3045 - val_loss: 1.5689 - val_accuracy: 0.3689 - 67s/epoch - 151ms/step\n",
      "Epoch 20/80\n",
      "442/442 - 67s - loss: 1.6982 - accuracy: 0.3074 - val_loss: 1.6374 - val_accuracy: 0.3304 - 67s/epoch - 152ms/step\n",
      "Epoch 21/80\n",
      "442/442 - 69s - loss: 1.6835 - accuracy: 0.3162 - val_loss: 1.6005 - val_accuracy: 0.3487 - 69s/epoch - 155ms/step\n",
      "Epoch 22/80\n",
      "442/442 - 68s - loss: 1.6732 - accuracy: 0.3262 - val_loss: 1.6519 - val_accuracy: 0.3269 - 68s/epoch - 155ms/step\n",
      "Epoch 23/80\n",
      "442/442 - 68s - loss: 1.6578 - accuracy: 0.3307 - val_loss: 1.6193 - val_accuracy: 0.3386 - 68s/epoch - 153ms/step\n",
      "Epoch 24/80\n",
      "442/442 - 70s - loss: 1.6453 - accuracy: 0.3368 - val_loss: 1.5399 - val_accuracy: 0.3778 - 70s/epoch - 158ms/step\n",
      "Epoch 25/80\n",
      "442/442 - 68s - loss: 1.6354 - accuracy: 0.3371 - val_loss: 1.5169 - val_accuracy: 0.3826 - 68s/epoch - 154ms/step\n",
      "Epoch 26/80\n",
      "442/442 - 68s - loss: 1.6265 - accuracy: 0.3422 - val_loss: 1.5141 - val_accuracy: 0.3867 - 68s/epoch - 153ms/step\n",
      "Epoch 27/80\n",
      "442/442 - 70s - loss: 1.6087 - accuracy: 0.3487 - val_loss: 1.4930 - val_accuracy: 0.3952 - 70s/epoch - 157ms/step\n",
      "Epoch 28/80\n",
      "442/442 - 71s - loss: 1.5982 - accuracy: 0.3527 - val_loss: 1.5321 - val_accuracy: 0.3864 - 71s/epoch - 160ms/step\n",
      "Epoch 29/80\n",
      "442/442 - 86s - loss: 1.5860 - accuracy: 0.3609 - val_loss: 1.6145 - val_accuracy: 0.3614 - 86s/epoch - 194ms/step\n",
      "Epoch 30/80\n"
     ]
    }
   ],
   "source": [
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "np.random.seed(111)\n",
    "\n",
    "history = model.fit(X_train/255., Y_train_vec, epochs=80, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fcd1f9c-9edf-46b5-a364-806d19c8a8d9",
   "metadata": {},
   "source": [
    "### CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "664d966f-2c12-42cd-b0c1-cb71528da461",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import datasets, layers, models\n",
    "from tensorflow.keras.layers import Input,Conv2D,BatchNormalization,MaxPooling2D,Dropout,Flatten\n",
    "from tensorflow.keras.models import Sequential      #This allows appending layers to existing models\n",
    "from tensorflow.keras.layers import Dense           #This allows defining the characteristics of a particular layer\n",
    "from tensorflow.keras import optimizers             #This allows using whichever optimiser we want (sgd,adam,RMSprop)\n",
    "from tensorflow.keras import regularizers           #This allows using whichever regularizer we want (l1,l2,l1_l2)\n",
    "from tensorflow.keras.utils import to_categorical \n",
    "import tensorflow as tf\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "eta=0.001\n",
    "lmbd=0.0001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ee98a864-d136-4fd7-ab66-48f4e4369c48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(26058, 48, 48)\n",
      "(26058,)\n",
      "(6593, 48, 48)\n",
      "(6593,)\n"
     ]
    }
   ],
   "source": [
    "Y_train_vec=to_categorical(Y_train)\n",
    "Y_test_vec=to_categorical(Y_test)\n",
    "\n",
    "print(X_train.shape)\n",
    "print(Y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b68282af-31ab-4633-8f32-a32fd45a43b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_9 (Conv2D)           (None, 46, 46, 32)        320       \n",
      "                                                                 \n",
      " dropout_8 (Dropout)         (None, 46, 46, 32)        0         \n",
      "                                                                 \n",
      " conv2d_10 (Conv2D)          (None, 42, 42, 64)        51264     \n",
      "                                                                 \n",
      " max_pooling2d_6 (MaxPooling  (None, 21, 21, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_9 (Dropout)         (None, 21, 21, 64)        0         \n",
      "                                                                 \n",
      " conv2d_11 (Conv2D)          (None, 18, 18, 128)       131200    \n",
      "                                                                 \n",
      " max_pooling2d_7 (MaxPooling  (None, 9, 9, 128)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_12 (Conv2D)          (None, 7, 7, 64)          73792     \n",
      "                                                                 \n",
      " max_pooling2d_8 (MaxPooling  (None, 3, 3, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_13 (Conv2D)          (None, 2, 2, 32)          8224      \n",
      "                                                                 \n",
      " max_pooling2d_9 (MaxPooling  (None, 1, 1, 32)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_10 (Dropout)        (None, 1, 1, 32)          0         \n",
      "                                                                 \n",
      " flatten_2 (Flatten)         (None, 32)                0         \n",
      "                                                                 \n",
      " dense_7 (Dense)             (None, 256)               8448      \n",
      "                                                                 \n",
      " dropout_11 (Dropout)        (None, 256)               0         \n",
      "                                                                 \n",
      " dense_8 (Dense)             (None, 128)               32896     \n",
      "                                                                 \n",
      " dropout_12 (Dropout)        (None, 128)               0         \n",
      "                                                                 \n",
      " dense_9 (Dense)             (None, 7)                 903       \n",
      "                                                                 \n",
      " dropout_13 (Dropout)        (None, 7)                 0         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 307,047\n",
      "Trainable params: 307,047\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3, min_delta=0.005)\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(image_size, image_size, 1), kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "model.add(layers.Conv2D(64, (5, 5), activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "model.add(layers.Conv2D(128, (4, 4), activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(32, (2, 2), activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(256, activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "model.add(layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "model.add(layers.Dense(7,activation='softmax', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.10))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "78cbfb38-86cc-45b8-9727-a67e88469d05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_5 (Conv2D)           (None, 44, 44, 32)        832       \n",
      "                                                                 \n",
      " max_pooling2d_4 (MaxPooling  (None, 22, 22, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_6 (Conv2D)           (None, 20, 20, 64)        18496     \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPooling  (None, 6, 6, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_7 (Conv2D)           (None, 4, 4, 64)          36928     \n",
      "                                                                 \n",
      " conv2d_8 (Conv2D)           (None, 2, 2, 32)          18464     \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 128)               0         \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 256)               33024     \n",
      "                                                                 \n",
      " dropout_6 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 128)               32896     \n",
      "                                                                 \n",
      " dropout_7 (Dropout)         (None, 128)               0         \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 32)                4128      \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 7)                 231       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 144,999\n",
      "Trainable params: 144,999\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3, min_delta=0.005)\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (5, 5), activation='tanh', input_shape=(image_size, image_size, 1), kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.MaxPooling2D((3, 3)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='tanh', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='tanh', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(256, activation='tanh', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.05))\n",
    "model.add(layers.Dense(128, activation='tanh', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dropout(rate=0.05))\n",
    "model.add(layers.Dense(32, activation='tanh', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "model.add(layers.Dense(7,activation='softmax', kernel_regularizer=regularizers.l2(lmbd)))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b7e023a-ac18-497b-894f-64d8aa3128c0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[11], line 7\u001b[0m\n\u001b[1;32m      3\u001b[0m model\u001b[38;5;241m.\u001b[39mcompile(loss\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategorical_crossentropy\u001b[39m\u001b[38;5;124m'\u001b[39m, optimizer\u001b[38;5;241m=\u001b[39mopt, metrics\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      5\u001b[0m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mseed(\u001b[38;5;241m21\u001b[39m)\n\u001b[0;32m----> 7\u001b[0m history \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mfit(X_train\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_train_vec, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m50\u001b[39m, \n\u001b[1;32m      8\u001b[0m                     validation_data\u001b[38;5;241m=\u001b[39m(X_test\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_test_vec), batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m256\u001b[39m, callbacks\u001b[38;5;241m=\u001b[39m[callback], verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/utils/traceback_utils.py:59\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sys\u001b[38;5;241m.\u001b[39mversion_info\u001b[38;5;241m.\u001b[39mmajor \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m3\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m sys\u001b[38;5;241m.\u001b[39mversion_info\u001b[38;5;241m.\u001b[39mminor \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m7\u001b[39m:\n\u001b[1;32m     57\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fn\n\u001b[0;32m---> 59\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21merror_handler\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     60\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mdebugging\u001b[38;5;241m.\u001b[39mis_traceback_filtering_enabled():\n\u001b[1;32m     61\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "warnings.filterwarnings(\"ignore\")\n",
    "opt = optimizers.Adam(learning_rate=eta)\n",
    "model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n",
    "\n",
    "np.random.seed(21)\n",
    "\n",
    "history = model.fit(X_train/255., Y_train_vec, epochs=50, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=256, callbacks=[callback], verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82277bd4-4b08-4456-9dcb-ae59a9abad6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(os.path.join('.','CNN_model.keras'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d09d872a-5ffa-4739-bf6d-a89b5d406f1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_CNN = keras.models.load_model(os.path.join('.','CNN_model.keras'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "27d3f664-a263-401d-a6f9-da40aca65028",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-11 12:18:43.319837: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 48, 48, 32)        320       \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 48, 48, 32)       128       \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 24, 24, 32)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 24, 24, 32)        0         \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 24, 24, 64)        51264     \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 24, 24, 64)       256       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 12, 12, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 12, 12, 64)        0         \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 12, 12, 256)       147712    \n",
      "                                                                 \n",
      " batch_normalization_2 (Batc  (None, 12, 12, 256)      1024      \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 6, 6, 256)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 6, 6, 256)         0         \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 6, 6, 256)         590080    \n",
      "                                                                 \n",
      " batch_normalization_3 (Batc  (None, 6, 6, 256)        1024      \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 3, 3, 256)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " dropout_3 (Dropout)         (None, 3, 3, 256)         0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 2304)              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 128)               295040    \n",
      "                                                                 \n",
      " batch_normalization_4 (Batc  (None, 128)              512       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_4 (Dropout)         (None, 128)               0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 256)               33024     \n",
      "                                                                 \n",
      " batch_normalization_5 (Batc  (None, 256)              1024      \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dropout_5 (Dropout)         (None, 256)               0         \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 6)                 1542      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,122,950\n",
      "Trainable params: 1,120,966\n",
      "Non-trainable params: 1,984\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# 1 - Convolution\n",
    "model.add(Conv2D(32,(3,3), padding='same',activation='relu', input_shape=(48, 48,1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 2nd Convolution layer\n",
    "model.add(Conv2D(64,(5,5),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 3rd Convolution layer\n",
    "model.add(Conv2D(256,(3,3),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# 4th Convolution layer\n",
    "model.add(Conv2D(256,(3,3),activation='relu', padding='same'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Flattening\n",
    "model.add(Flatten())\n",
    "\n",
    "# Fully connected layer 1st layer\n",
    "model.add(Dense(128,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "# Fully connected layer 2nd layer\n",
    "model.add(Dense(256,activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Dense(6, activation='softmax'))\n",
    "\n",
    "sgd = optimizers.SGD(learning_rate=eta)\n",
    "model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9b69c422-f726-46cb-a754-4a0925ee8105",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "408/408 - 169s - loss: 2.4327 - accuracy: 0.1899 - val_loss: 1.9892 - val_accuracy: 0.1964 - 169s/epoch - 414ms/step\n",
      "Epoch 2/50\n",
      "408/408 - 169s - loss: 2.2360 - accuracy: 0.2060 - val_loss: 1.8096 - val_accuracy: 0.2313 - 169s/epoch - 415ms/step\n",
      "Epoch 3/50\n",
      "408/408 - 200s - loss: 2.1409 - accuracy: 0.2063 - val_loss: 1.7510 - val_accuracy: 0.2604 - 200s/epoch - 489ms/step\n",
      "Epoch 4/50\n",
      "408/408 - 199s - loss: 2.0694 - accuracy: 0.2137 - val_loss: 1.7340 - val_accuracy: 0.2588 - 199s/epoch - 488ms/step\n",
      "Epoch 5/50\n",
      "408/408 - 187s - loss: 2.0109 - accuracy: 0.2201 - val_loss: 1.7266 - val_accuracy: 0.2632 - 187s/epoch - 458ms/step\n",
      "Epoch 6/50\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[19], line 5\u001b[0m\n\u001b[1;32m      1\u001b[0m warnings\u001b[38;5;241m.\u001b[39mfilterwarnings(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      3\u001b[0m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mseed(\u001b[38;5;241m21\u001b[39m)\n\u001b[0;32m----> 5\u001b[0m history \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mfit(X_train\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_train_vec, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m50\u001b[39m, \n\u001b[1;32m      6\u001b[0m                     validation_data\u001b[38;5;241m=\u001b[39m(X_test\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m255.\u001b[39m, Y_test_vec), batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m64\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/keras/engine/training.py:1685\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1677\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mTrace(\n\u001b[1;32m   1678\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrain\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1679\u001b[0m     epoch_num\u001b[38;5;241m=\u001b[39mepoch,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1682\u001b[0m     _r\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m,\n\u001b[1;32m   1683\u001b[0m ):\n\u001b[1;32m   1684\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_begin(step)\n\u001b[0;32m-> 1685\u001b[0m     tmp_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrain_function(iterator)\n\u001b[1;32m   1686\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data_handler\u001b[38;5;241m.\u001b[39mshould_sync:\n\u001b[1;32m   1687\u001b[0m         context\u001b[38;5;241m.\u001b[39masync_wait()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:894\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    891\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    893\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 894\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    896\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    897\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:926\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    923\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    924\u001b[0m   \u001b[38;5;66;03m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    925\u001b[0m   \u001b[38;5;66;03m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 926\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_no_variable_creation_fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)  \u001b[38;5;66;03m# pylint: disable=not-callable\u001b[39;00m\n\u001b[1;32m    927\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_variable_creation_fn \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    928\u001b[0m   \u001b[38;5;66;03m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    929\u001b[0m   \u001b[38;5;66;03m# in parallel.\u001b[39;00m\n\u001b[1;32m    930\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py:143\u001b[0m, in \u001b[0;36mTracingCompiler.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m    141\u001b[0m   (concrete_function,\n\u001b[1;32m    142\u001b[0m    filtered_flat_args) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m--> 143\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m concrete_function\u001b[38;5;241m.\u001b[39m_call_flat(\n\u001b[1;32m    144\u001b[0m     filtered_flat_args, captured_inputs\u001b[38;5;241m=\u001b[39mconcrete_function\u001b[38;5;241m.\u001b[39mcaptured_inputs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1757\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1753\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1754\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1755\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1756\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1757\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_call_outputs(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inference_function\u001b[38;5;241m.\u001b[39mcall(\n\u001b[1;32m   1758\u001b[0m       ctx, args, cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager))\n\u001b[1;32m   1759\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1760\u001b[0m     args,\n\u001b[1;32m   1761\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1762\u001b[0m     executing_eagerly)\n\u001b[1;32m   1763\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:381\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _InterpolateFunctionError(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    380\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m cancellation_manager \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 381\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute(\n\u001b[1;32m    382\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    383\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[1;32m    384\u001b[0m         inputs\u001b[38;5;241m=\u001b[39margs,\n\u001b[1;32m    385\u001b[0m         attrs\u001b[38;5;241m=\u001b[39mattrs,\n\u001b[1;32m    386\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx)\n\u001b[1;32m    387\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    388\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    389\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    390\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    393\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx,\n\u001b[1;32m    394\u001b[0m         cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/tensorflow/python/eager/execute.py:52\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     51\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 52\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[1;32m     53\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     55\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "np.random.seed(21)\n",
    "\n",
    "history = model.fit(X_train/255., Y_train_vec, epochs=50, \n",
    "                    validation_data=(X_test/255., Y_test_vec), batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2d2aa3cc-ecbe-4a20-89c9-616e6f3cebcb",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'train_generator' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[0;32m<timed exec>:2\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'train_generator' is not defined"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "epochs = 15\n",
    "steps_per_epoch = train_generator.n//train_generator.batch_size\n",
    "validation_steps = validation_generator.n//validation_generator.batch_size\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1,\n",
    "                              patience=2, min_lr=0.00001, mode='auto')\n",
    "checkpoint = ModelCheckpoint(\"model_weights.h5\", monitor='val_accuracy',\n",
    "                             save_weights_only=True, mode='max', verbose=1)\n",
    "callbacks = [PlotLossesCallback(), checkpoint, reduce_lr]\n",
    "\n",
    "history = model.fit(\n",
    "    x=train_generator,\n",
    "    steps_per_epoch=steps_per_epoch,\n",
    "    epochs=epochs,\n",
    "    validation_data = validation_generator,\n",
    "    validation_steps = validation_steps,\n",
    "    callbacks=callbacks\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "254c1d3d-0840-4e44-a49d-fea27791855c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
